// <auto-generated />
using System;
using CashCanvas.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CashCanvas.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250609093522_AddRefreshTokenTable")]
    partial class AddRefreshTokenTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CashCanvas.Core.Entities.Bill", b =>
                {
                    b.Property<Guid>("BillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Primary Key. Generated by the database.");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Bill amount.");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()")
                        .HasComment("Timestamp when the bill was created.");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Due date for the bill.");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Frequency of the bill (Daily, Weekly, BiWeekly, Monthly, Quarterly, HalfYearly, Yearly).");

                    b.Property<bool>("IsContinued")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the bill is active (soft delete).");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the bill was last modified.");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("ReminderDay")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("Bill title or description.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Foreign Key to User table.");

                    b.HasKey("BillId")
                        .HasName("bill_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("Bills", null, t =>
                        {
                            t.HasComment("Represents a recurring bill for a user, including reminders, frequency, and payment method.");
                        });
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Budget", b =>
                {
                    b.Property<Guid>("BudgetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Primary Key. Generated by the database.");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Budgeted amount for the period and category.");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasComment("Foreign Key to Category table.");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()")
                        .HasComment("Timestamp when the budget was created.");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("End date of the budget period.");

                    b.Property<bool>("IsContinued")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the budget is active (soft delete).");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the budget was last modified.");

                    b.Property<string>("Notes")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasComment("Optional notes about this budget.");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Budget period (Weekly, Monthly, Quarterly, Yearly, Custom).");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Start date of the budget period.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Foreign Key to User table.");

                    b.HasKey("BudgetId")
                        .HasName("budget_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Budgets", null, t =>
                        {
                            t.HasComment("Represents a period-based budget set by a user for a specific category.");
                        });
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Primary Key. Generated by the database.");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Category name (unique per user).");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()")
                        .HasComment("Timestamp when the category was created.");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasComment("Description of the category.");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the category is active.");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the category was last updated.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Indicates whether the category is for 'Income' or 'Expense'.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Foreign Key to User table.");

                    b.HasKey("CategoryId")
                        .HasName("category_pkey");

                    b.HasIndex("UserId", "CategoryName")
                        .IsUnique()
                        .HasDatabaseName("UX_Category_UserId_Name");

                    b.ToTable("Categories", null, t =>
                        {
                            t.HasComment("Represents a transaction category (e.g., Groceries, Salary, Rent) for a user.");
                        });
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.ErrorLog", b =>
                {
                    b.Property<Guid>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("ActionName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ControllerName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ErrorOccurAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("ErrorOccurCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1")
                        .HasComment("Counts how many times this specific error has occurred (duplicates are incremented by trigger).");

                    b.Property<string>("ExceptionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("SolvedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("SolvedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("ErrorId")
                        .HasName("errorlog_pkey");

                    b.ToTable("ErrorLog", null, t =>
                        {
                            t.HasComment("This table logs application errors and exception events. Each row stores the error details, including the message, stack trace, type, time of occurrence, status code, controller/action context, resolution status, and number of occurrences. Deduplication and counting of repeated errors is handled by triggers.");
                        });
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.PasswordRecoveryToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Primary Key. Generated by the database.");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()")
                        .HasComment("When the token was created.");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When the token expires.");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Indicates if the token has been used.");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("The password recovery token (should be unique).");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Foreign Key to Users table.");

                    b.HasKey("TokenId")
                        .HasName("passwordrecoverytoken_pkey");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("PasswordRecoveryTokens", null, t =>
                        {
                            t.HasComment("Stores password recovery tokens for users.");
                        });
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Primary Key. Generated by the database.");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The amount paid in this payment.");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid")
                        .HasComment("Foreign Key to Bill table.");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()")
                        .HasComment("When the payment record was created.");

                    b.Property<bool>("IsContinued")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the payment record is active (soft delete).");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("When the payment record was last modified.");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasComment("Optional notes for the payment.");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the payment was made.");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Payment method (Cash, Card, UPI, etc).");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Status of the payment: COMPLETE, PENDING, or FAILED.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Foreign Key to User table.");

                    b.HasKey("PaymentId")
                        .HasName("payment_pkey");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments", null, t =>
                        {
                            t.HasComment("Represents a payment made for a bill by a user.");
                        });
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("TokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Primary Key. Generated by the database.");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("IP address at token creation.");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Expiration timestamp.");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Whether the token is currently active.");

                    b.Property<bool>("IsRevoked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the token has been explicitly revoked.");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("IP address at revocation.");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasComment("The actual refresh token string.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Foreign Key to User table.");

                    b.HasKey("TokenId")
                        .HasName("refreshtoken_pkey");

                    b.HasIndex("Token")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", null, t =>
                        {
                            t.HasComment("Stores refresh tokens for JWT authentication, enabling secure session management, token rotation, auditing, and device-level tracking.");
                        });
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Reminder", b =>
                {
                    b.Property<Guid>("ReminderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BillId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsContinued")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("ReminderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("ReminderId");

                    b.HasIndex("BillId");

                    b.HasIndex("UserId");

                    b.ToTable("Reminders");
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Primary Key. Generated by the database.");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Transaction amount.");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid")
                        .HasComment("Foreign Key to Category table.");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()")
                        .HasComment("Timestamp when the transaction was created.");

                    b.Property<string>("Description")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasComment("Optional description of the transaction.");

                    b.Property<bool>("IsContinued")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the transaction is active (for soft delete).");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the transaction was last updated.");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasComment("Payment method used (Cash, Card, UPI, NetBanking, Cheque, Wallet).");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Actual date of the transaction.");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasComment("Type of transaction: 'Expense' or 'Income'.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasComment("Foreign Key to User table.");

                    b.HasKey("TransactionId")
                        .HasName("transaction_pkey");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions", null, t =>
                        {
                            t.HasComment("Represents a financial transaction (income or expense) associated with a user and category.");
                        });
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()")
                        .HasComment("Primary Key. Generated by the database.");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()")
                        .HasComment("Timestamp when the user was created.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("HashPassword")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the user is active (for soft delete).");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp of the last user login.");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("Timestamp when the user was last modified.");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("Unique username for the user.");

                    b.HasKey("UserId")
                        .HasName("users_pkey");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", null, t =>
                        {
                            t.HasComment("Stores application user information.");
                        });
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Bill", b =>
                {
                    b.HasOne("CashCanvas.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Budget", b =>
                {
                    b.HasOne("CashCanvas.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CashCanvas.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Category", b =>
                {
                    b.HasOne("CashCanvas.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.PasswordRecoveryToken", b =>
                {
                    b.HasOne("CashCanvas.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Payment", b =>
                {
                    b.HasOne("CashCanvas.Core.Entities.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CashCanvas.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.RefreshToken", b =>
                {
                    b.HasOne("CashCanvas.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Reminder", b =>
                {
                    b.HasOne("CashCanvas.Core.Entities.Bill", "Bill")
                        .WithMany()
                        .HasForeignKey("BillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CashCanvas.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bill");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CashCanvas.Core.Entities.Transaction", b =>
                {
                    b.HasOne("CashCanvas.Core.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CashCanvas.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
