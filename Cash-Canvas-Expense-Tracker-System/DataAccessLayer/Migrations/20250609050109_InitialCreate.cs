using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace CashCanvas.Data.Migrations
{
    /// <inheritdoc />
    public partial class InitialCreate : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "ErrorLog",
                columns: table => new
                {
                    ErrorId = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "gen_random_uuid()"),
                    ErrorMessage = table.Column<string>(type: "text", nullable: false),
                    StackTrace = table.Column<string>(type: "text", nullable: true),
                    ExceptionType = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: false),
                    ErrorOccurAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "now()"),
                    StatusCode = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    ControllerName = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    ActionName = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true),
                    IsSolved = table.Column<bool>(type: "boolean", nullable: false),
                    SolvedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    SolvedBy = table.Column<Guid>(type: "uuid", nullable: true),
                    ErrorOccurCount = table.Column<int>(type: "integer", nullable: false, defaultValueSql: "1", comment: "Counts how many times this specific error has occurred (duplicates are incremented by trigger).")
                },
                constraints: table =>
                {
                    table.PrimaryKey("errorlog_pkey", x => x.ErrorId);
                },
                comment: "This table logs application errors and exception events. Each row stores the error details, including the message, stack trace, type, time of occurrence, status code, controller/action context, resolution status, and number of occurrences. Deduplication and counting of repeated errors is handled by triggers.");

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    UserId = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "gen_random_uuid()", comment: "Primary Key. Generated by the database."),
                    UserName = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false, comment: "Unique username for the user."),
                    Email = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false),
                    HashPassword = table.Column<string>(type: "character varying(256)", maxLength: 256, nullable: false),
                    LastLoginAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true, comment: "Timestamp of the last user login."),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "now()", comment: "Timestamp when the user was created."),
                    ModifiedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true, comment: "Timestamp when the user was last modified."),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true, comment: "Indicates if the user is active (for soft delete).")
                },
                constraints: table =>
                {
                    table.PrimaryKey("users_pkey", x => x.UserId);
                },
                comment: "Stores application user information.");

            migrationBuilder.CreateTable(
                name: "Bills",
                columns: table => new
                {
                    BillId = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "gen_random_uuid()", comment: "Primary Key. Generated by the database."),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false, comment: "Foreign Key to User table."),
                    Title = table.Column<string>(type: "character varying(100)", maxLength: 100, nullable: false, comment: "Bill title or description."),
                    Amount = table.Column<decimal>(type: "numeric(18,2)", nullable: false, comment: "Bill amount."),
                    DueDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, comment: "Due date for the bill."),
                    Frequency = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false, comment: "Frequency of the bill (Daily, Weekly, BiWeekly, Monthly, Quarterly, HalfYearly, Yearly)."),
                    Notes = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    PaymentMethod = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false),
                    ReminderDay = table.Column<int>(type: "integer", nullable: false),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "now()", comment: "Timestamp when the bill was created."),
                    ModifiedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true, comment: "Timestamp when the bill was last modified."),
                    IsContinued = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true, comment: "Indicates if the bill is active (soft delete).")
                },
                constraints: table =>
                {
                    table.PrimaryKey("bill_pkey", x => x.BillId);
                    table.ForeignKey(
                        name: "FK_Bills_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Represents a recurring bill for a user, including reminders, frequency, and payment method.");

            migrationBuilder.CreateTable(
                name: "Categories",
                columns: table => new
                {
                    CategoryId = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "gen_random_uuid()", comment: "Primary Key. Generated by the database."),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false, comment: "Foreign Key to User table."),
                    CategoryName = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false, comment: "Category name (unique per user)."),
                    Description = table.Column<string>(type: "character varying(200)", maxLength: 200, nullable: true, comment: "Description of the category."),
                    Type = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false, comment: "Indicates whether the category is for 'Income' or 'Expense'."),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true, comment: "Indicates if the category is active."),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "now()", comment: "Timestamp when the category was created."),
                    ModifiedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true, comment: "Timestamp when the category was last updated.")
                },
                constraints: table =>
                {
                    table.PrimaryKey("category_pkey", x => x.CategoryId);
                    table.ForeignKey(
                        name: "FK_Categories_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Represents a transaction category (e.g., Groceries, Salary, Rent) for a user.");

            migrationBuilder.CreateTable(
                name: "PasswordRecoveryTokens",
                columns: table => new
                {
                    TokenId = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "gen_random_uuid()", comment: "Primary Key. Generated by the database."),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false, comment: "Foreign Key to Users table."),
                    Token = table.Column<string>(type: "character varying(256)", maxLength: 256, nullable: false, comment: "The password recovery token (should be unique)."),
                    ExpirationTime = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, comment: "When the token expires."),
                    IsUsed = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false, comment: "Indicates if the token has been used."),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "now()", comment: "When the token was created.")
                },
                constraints: table =>
                {
                    table.PrimaryKey("passwordrecoverytoken_pkey", x => x.TokenId);
                    table.ForeignKey(
                        name: "FK_PasswordRecoveryTokens_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Stores password recovery tokens for users.");

            migrationBuilder.CreateTable(
                name: "RefreshTokens",
                columns: table => new
                {
                    TokenId = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "gen_random_uuid()", comment: "Primary Key. Generated by the database."),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false, comment: "Foreign Key to User table."),
                    Token = table.Column<string>(type: "character varying(256)", maxLength: 256, nullable: false, comment: "The actual refresh token string."),
                    ExpirationTime = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, comment: "Expiration timestamp."),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "now()"),
                    CreatedByIp = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: false, comment: "IP address at token creation."),
                    UserAgent = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true, comment: "User agent or device information."),
                    DeviceId = table.Column<string>(type: "character varying(255)", maxLength: 255, nullable: true, comment: "A unique identifier for the user's device."),
                    IsRevoked = table.Column<bool>(type: "boolean", nullable: false, defaultValue: false, comment: "Indicates whether the token has been explicitly revoked."),
                    RevokedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    RevokedByIp = table.Column<string>(type: "character varying(50)", maxLength: 50, nullable: true, comment: "IP address at revocation."),
                    IsActive = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true, comment: "Whether the token is currently active.")
                },
                constraints: table =>
                {
                    table.PrimaryKey("refreshtoken_pkey", x => x.TokenId);
                    table.ForeignKey(
                        name: "FK_RefreshTokens_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Stores refresh tokens for JWT authentication, enabling secure session management, token rotation, auditing, and device-level tracking.");

            migrationBuilder.CreateTable(
                name: "Payments",
                columns: table => new
                {
                    PaymentId = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "gen_random_uuid()", comment: "Primary Key. Generated by the database."),
                    BillId = table.Column<Guid>(type: "uuid", nullable: false, comment: "Foreign Key to Bill table."),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false, comment: "Foreign Key to User table."),
                    AmountPaid = table.Column<decimal>(type: "numeric(18,2)", nullable: false, comment: "The amount paid in this payment."),
                    PaymentDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, comment: "The date and time when the payment was made."),
                    PaymentMethod = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false, comment: "Payment method (Cash, Card, UPI, etc)."),
                    Status = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false, comment: "Status of the payment: COMPLETE, PENDING, or FAILED."),
                    Notes = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true, comment: "Optional notes for the payment."),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "now()", comment: "When the payment record was created."),
                    ModifiedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true, comment: "When the payment record was last modified."),
                    IsContinued = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true, comment: "Indicates if the payment record is active (soft delete).")
                },
                constraints: table =>
                {
                    table.PrimaryKey("payment_pkey", x => x.PaymentId);
                    table.ForeignKey(
                        name: "FK_Payments_Bills_BillId",
                        column: x => x.BillId,
                        principalTable: "Bills",
                        principalColumn: "BillId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Payments_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Represents a payment made for a bill by a user.");

            migrationBuilder.CreateTable(
                name: "Reminders",
                columns: table => new
                {
                    ReminderId = table.Column<Guid>(type: "uuid", nullable: false),
                    BillId = table.Column<Guid>(type: "uuid", nullable: false),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false),
                    ReminderDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    Notes = table.Column<string>(type: "character varying(500)", maxLength: 500, nullable: true),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false),
                    ModifiedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true),
                    IsContinued = table.Column<bool>(type: "boolean", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reminders", x => x.ReminderId);
                    table.ForeignKey(
                        name: "FK_Reminders_Bills_BillId",
                        column: x => x.BillId,
                        principalTable: "Bills",
                        principalColumn: "BillId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Reminders_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "Budgets",
                columns: table => new
                {
                    BudgetId = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "gen_random_uuid()", comment: "Primary Key. Generated by the database."),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false, comment: "Foreign Key to User table."),
                    CategoryId = table.Column<Guid>(type: "uuid", nullable: false, comment: "Foreign Key to Category table."),
                    Amount = table.Column<decimal>(type: "numeric(18,2)", nullable: false, comment: "Budgeted amount for the period and category."),
                    Period = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false, comment: "Budget period (Weekly, Monthly, Quarterly, Yearly, Custom)."),
                    StartDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, comment: "Start date of the budget period."),
                    EndDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, comment: "End date of the budget period."),
                    Notes = table.Column<string>(type: "character varying(300)", maxLength: 300, nullable: true, comment: "Optional notes about this budget."),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "now()", comment: "Timestamp when the budget was created."),
                    ModifiedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true, comment: "Timestamp when the budget was last modified."),
                    IsContinued = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true, comment: "Indicates if the budget is active (soft delete).")
                },
                constraints: table =>
                {
                    table.PrimaryKey("budget_pkey", x => x.BudgetId);
                    table.ForeignKey(
                        name: "FK_Budgets_Categories_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "Categories",
                        principalColumn: "CategoryId",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_Budgets_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Represents a period-based budget set by a user for a specific category.");

            migrationBuilder.CreateTable(
                name: "Transactions",
                columns: table => new
                {
                    TransactionId = table.Column<Guid>(type: "uuid", nullable: false, defaultValueSql: "gen_random_uuid()", comment: "Primary Key. Generated by the database."),
                    UserId = table.Column<Guid>(type: "uuid", nullable: false, comment: "Foreign Key to User table."),
                    Amount = table.Column<decimal>(type: "numeric(18,2)", nullable: false, comment: "Transaction amount."),
                    TransactionType = table.Column<string>(type: "character varying(10)", maxLength: 10, nullable: false, comment: "Type of transaction: 'Expense' or 'Income'."),
                    PaymentMethod = table.Column<string>(type: "character varying(20)", maxLength: 20, nullable: false, comment: "Payment method used (Cash, Card, UPI, NetBanking, Cheque, Wallet)."),
                    Description = table.Column<string>(type: "character varying(300)", maxLength: 300, nullable: true, comment: "Optional description of the transaction."),
                    CategoryId = table.Column<Guid>(type: "uuid", nullable: false, comment: "Foreign Key to Category table."),
                    CreatedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, defaultValueSql: "now()", comment: "Timestamp when the transaction was created."),
                    ModifiedAt = table.Column<DateTime>(type: "timestamp with time zone", nullable: true, comment: "Timestamp when the transaction was last updated."),
                    TransactionDate = table.Column<DateTime>(type: "timestamp with time zone", nullable: false, comment: "Actual date of the transaction."),
                    IsContinued = table.Column<bool>(type: "boolean", nullable: false, defaultValue: true, comment: "Indicates if the transaction is active (for soft delete).")
                },
                constraints: table =>
                {
                    table.PrimaryKey("transaction_pkey", x => x.TransactionId);
                    table.ForeignKey(
                        name: "FK_Transactions_Categories_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "Categories",
                        principalColumn: "CategoryId",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Transactions_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "UserId",
                        onDelete: ReferentialAction.Cascade);
                },
                comment: "Represents a financial transaction (income or expense) associated with a user and category.");

            migrationBuilder.CreateIndex(
                name: "IX_Bills_UserId",
                table: "Bills",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Budgets_CategoryId",
                table: "Budgets",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Budgets_UserId",
                table: "Budgets",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "UX_Category_UserId_Name",
                table: "Categories",
                columns: new[] { "UserId", "CategoryName" },
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PasswordRecoveryTokens_Token",
                table: "PasswordRecoveryTokens",
                column: "Token",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_PasswordRecoveryTokens_UserId",
                table: "PasswordRecoveryTokens",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Payments_BillId",
                table: "Payments",
                column: "BillId");

            migrationBuilder.CreateIndex(
                name: "IX_Payments_UserId",
                table: "Payments",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_RefreshTokens_Token",
                table: "RefreshTokens",
                column: "Token",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_RefreshTokens_UserId",
                table: "RefreshTokens",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Reminders_BillId",
                table: "Reminders",
                column: "BillId");

            migrationBuilder.CreateIndex(
                name: "IX_Reminders_UserId",
                table: "Reminders",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Transactions_CategoryId",
                table: "Transactions",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Transactions_UserId",
                table: "Transactions",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Users_Email",
                table: "Users",
                column: "Email",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Users_UserName",
                table: "Users",
                column: "UserName",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "Budgets");

            migrationBuilder.DropTable(
                name: "ErrorLog");

            migrationBuilder.DropTable(
                name: "PasswordRecoveryTokens");

            migrationBuilder.DropTable(
                name: "Payments");

            migrationBuilder.DropTable(
                name: "RefreshTokens");

            migrationBuilder.DropTable(
                name: "Reminders");

            migrationBuilder.DropTable(
                name: "Transactions");

            migrationBuilder.DropTable(
                name: "Bills");

            migrationBuilder.DropTable(
                name: "Categories");

            migrationBuilder.DropTable(
                name: "Users");
        }
    }
}
