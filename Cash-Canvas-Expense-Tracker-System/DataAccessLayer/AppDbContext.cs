using CashCanvas.Core.Beans.Enums;
using CashCanvas.Core.Entities;
using Microsoft.EntityFrameworkCore;

namespace CashCanvas.Data;

public class AppDbContext : DbContext
{

    public AppDbContext(DbContextOptions<AppDbContext> options)
        : base(options)
    {
    }
    public virtual DbSet<AuditLog> AuditLogs { get; set; }
    public virtual DbSet<User> Users { get; set; }
    public virtual DbSet<PasswordRecoveryToken> PasswordRecoveryTokens { get; set; }
    public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
    public virtual DbSet<RefreshToken> RefreshTokens { get; set; }
    public virtual DbSet<Category> Categories { get; set; }
    public virtual DbSet<Transaction> Transactions { get; set; }
    public virtual DbSet<Bill> Bills { get; set; }
    public virtual DbSet<Reminder> Reminders { get; set; }
    public virtual DbSet<Budget> Budgets { get; set; }
    public virtual DbSet<Payment> Payments { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder) { }
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {

        base.OnModelCreating(modelBuilder);

        // AuditLog table configuration
        modelBuilder.Entity<AuditLog>(entity =>
    {
        entity.HasKey(e => e.AuditLogId);
        entity.Property(e => e.TableName).IsRequired().HasMaxLength(100);
        entity.Property(e => e.ActionType).IsRequired().HasMaxLength(20);
        entity.Property(e => e.RecordId).HasMaxLength(100);
        entity.Property(e => e.ChangedBy).HasMaxLength(100);
        entity.Property(e => e.ChangedAt).HasDefaultValueSql("now()");
        entity.Property(e => e.OldValues).HasColumnType("jsonb");
        entity.Property(e => e.NewValues).HasColumnType("jsonb");
    });
        // Users table configuration
        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(u => u.UserId).HasName("users_pkey");

            entity.ToTable("Users", tb => tb.HasComment("Stores application user information."));

            entity.Property(u => u.UserId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasComment("Primary Key. Generated by the database.");

            entity.Property(u => u.UserName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("Unique username for the user.");

            entity.HasIndex(u => u.UserName).IsUnique();

            entity.Property(u => u.Email)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasIndex(u => u.Email).IsUnique();

            entity.Property(u => u.HashPassword)
                .IsRequired()
                .HasMaxLength(256);

            entity.Property(u => u.LastLoginAt)
                .HasComment("Timestamp of the last user login.");

            entity.Property(u => u.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("Timestamp when the user was created.");

            entity.Property(u => u.ModifiedAt)
                .HasComment("Timestamp when the user was last modified.");

            entity.Property(u => u.IsActive)
                .HasDefaultValue(true)
                .HasComment("Indicates if the user is active (for soft delete).");
        });

        modelBuilder.Entity<PasswordRecoveryToken>(entity =>
        {
            entity.HasKey(t => t.TokenId).HasName("passwordrecoverytoken_pkey");

            entity.ToTable("PasswordRecoveryTokens", tb => tb.HasComment("Stores password recovery tokens for users."));

            entity.Property(t => t.TokenId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasComment("Primary Key. Generated by the database.");

            entity.Property(t => t.UserId)
                .IsRequired()
                .HasComment("Foreign Key to Users table.");

            entity.HasIndex(t => t.UserId);

            entity.Property(t => t.Token)
                .IsRequired()
                .HasMaxLength(256)
                .HasComment("The password recovery token (should be unique).");

            entity.HasIndex(t => t.Token).IsUnique();

            entity.Property(t => t.ExpirationTime)
                .IsRequired()
                .HasComment("When the token expires.");

            entity.Property(t => t.IsUsed)
                .HasDefaultValue(false)
                .HasComment("Indicates if the token has been used.");

            entity.Property(t => t.CreatedAt)
                .HasDefaultValueSql("now()")
                .HasComment("When the token was created.");

            entity.HasOne(t => t.User)
                .WithMany() // Or .WithMany(u => u.PasswordRecoveryTokens) if navigation property exists
                .HasForeignKey(t => t.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
        });
        modelBuilder.Entity<ErrorLog>(entity =>
        {
            entity.HasKey(e => e.ErrorId).HasName("errorlog_pkey");

            entity.ToTable("ErrorLog", tb => tb.HasComment("This table logs application errors and exception events. Each row stores the error details, including the message, stack trace, type, time of occurrence, status code, controller/action context, resolution status, and number of occurrences. Deduplication and counting of repeated errors is handled by triggers."));

            entity.Property(e => e.ErrorId).HasDefaultValueSql("gen_random_uuid()");
            entity.Property(e => e.ErrorOccurAt).HasDefaultValueSql("now()");
            entity.Property(e => e.ErrorOccurCount)
                .HasDefaultValueSql("1")
                .HasComment("Counts how many times this specific error has occurred (duplicates are incremented by trigger).");
            entity.HasIndex(e => new { e.ExceptionType, e.StatusCode, e.ControllerName, e.ActionName })
                .IsUnique()
                .HasDatabaseName("unique_error_pattern");
            entity.Property(e => e.IsSolved)
                .HasDefaultValue(false);
        });
        modelBuilder.Entity<RefreshToken>(entity =>
    {
        entity.HasKey(e => e.TokenId).HasName("refreshtoken_pkey");

        entity.ToTable("RefreshTokens", tb => tb.HasComment(
            "Stores refresh tokens for JWT authentication, enabling secure session management, token rotation, auditing, and device-level tracking."
        ));

        entity.Property(e => e.TokenId)
            .HasDefaultValueSql("gen_random_uuid()")
            .HasComment("Primary Key. Generated by the database.");

        entity.Property(e => e.UserId)
            .IsRequired()
            .HasComment("Foreign Key to User table.");

        entity.HasIndex(e => e.UserId);

        entity.Property(e => e.Token)
            .IsRequired()
            .HasMaxLength(256)
            .HasComment("The actual refresh token string.");

        entity.HasIndex(e => e.Token).IsUnique();

        entity.Property(e => e.ExpirationTime)
            .IsRequired()
            .HasComment("Expiration timestamp.");

        entity.Property(e => e.CreatedAt)
            .IsRequired()
            .HasDefaultValueSql("now()");

        entity.Property(e => e.CreatedByIp)
            .IsRequired()
            .HasMaxLength(50)
            .HasComment("IP address at token creation.");

        entity.Property(e => e.IsRevoked)
            .IsRequired()
            .HasDefaultValue(false)
            .HasComment("Indicates whether the token has been explicitly revoked.");

        entity.Property(e => e.RevokedAt);

        entity.Property(e => e.RevokedByIp)
            .HasMaxLength(50)
            .HasComment("IP address at revocation.");

        entity.Property(e => e.IsActive)
            .IsRequired()
            .HasDefaultValue(true)
            .HasComment("Whether the token is currently active.");

        entity.HasOne(e => e.User)
            .WithMany()
            .HasForeignKey(e => e.UserId)
            .OnDelete(DeleteBehavior.Cascade)
            .IsRequired();
    });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("category_pkey");

            entity.ToTable("Categories", tb => tb.HasComment(
                "Represents a transaction category (e.g., Groceries, Salary, Rent) for a user."
            ));

            entity.Property(e => e.CategoryId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasComment("Primary Key. Generated by the database.");

            entity.Property(e => e.UserId)
                .IsRequired()
                .HasComment("Foreign Key to User table.");
            entity.HasIndex(e => new { e.UserId, e.CategoryName }).IsUnique()
                .HasDatabaseName("UX_Category_UserId_Name");

            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(50)
                .HasComment("Category name (unique per user).");

            entity.Property(e => e.Description)
                .HasMaxLength(200)
                .HasComment("Description of the category.");

            entity.Property(e => e.Type)
                .IsRequired()
                .HasMaxLength(20)
                .HasComment("Indicates whether the category is for 'Income' or 'Expense'.");

            entity.Property(e => e.IsActive)
                .IsRequired()
                .HasDefaultValue(true)
                .HasComment("Indicates if the category is active.");

            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("now()")
                .HasComment("Timestamp when the category was created.");

            entity.Property(e => e.ModifiedAt)
                .HasComment("Timestamp when the category was last updated.");

            entity.HasOne(e => e.User)
                .WithMany()
                .HasForeignKey(e => e.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
        });
        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("transaction_pkey");

            entity.ToTable("Transactions", tb => tb.HasComment(
                "Represents a financial transaction (income or expense) associated with a user and category."
            ));

            entity.Property(e => e.TransactionId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasComment("Primary Key. Generated by the database.");

            entity.Property(e => e.UserId)
                .IsRequired()
                .HasComment("Foreign Key to User table.");

            entity.HasIndex(e => e.UserId);

            entity.Property(e => e.Amount)
                .IsRequired()
                .HasColumnType("decimal(18,2)")
                .HasComment("Transaction amount.");

            entity.Property(e => e.TransactionType)
                .IsRequired()
                .HasMaxLength(10)
                .HasComment("Type of transaction: 'Expense' or 'Income'.");

            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasConversion<string>()
                .HasMaxLength(20)
                .HasComment("Payment method used (Cash, Card, UPI, NetBanking, Cheque, Wallet).");

            entity.Property(e => e.Description)
                .HasMaxLength(300)
                .HasComment("Optional description of the transaction.");

            entity.Property(e => e.CategoryId)
                .IsRequired()
                .HasComment("Foreign Key to Category table.");

            entity.HasIndex(e => e.CategoryId);

            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("now()")
                .HasComment("Timestamp when the transaction was created.");

            entity.Property(e => e.ModifiedAt)
                .HasComment("Timestamp when the transaction was last updated.");

            entity.Property(e => e.TransactionDate)
                .IsRequired()
                .HasComment("Actual date of the transaction.");

            entity.Property(e => e.IsContinued)
                .IsRequired()
                .HasDefaultValue(true)
                .HasComment("Indicates if the transaction is active (for soft delete).");

            entity.HasOne(e => e.User)
                .WithMany()
                .HasForeignKey(e => e.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            entity.HasOne(e => e.Category)
                .WithMany()
                .HasForeignKey(e => e.CategoryId)
                .OnDelete(DeleteBehavior.Restrict)
                .IsRequired();
        });
        modelBuilder.Entity<Bill>(entity =>
        {
            entity.HasKey(e => e.BillId).HasName("bill_pkey");

            entity.ToTable("Bills", tb => tb.HasComment(
                "Represents a recurring bill for a user, including reminders, frequency, and payment method."
            ));

            entity.Property(e => e.BillId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasComment("Primary Key. Generated by the database.");

            entity.Property(e => e.UserId)
                .IsRequired()
                .HasComment("Foreign Key to User table.");

            entity.HasIndex(e => e.UserId);

            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100)
                .HasComment("Bill title or description.");

            entity.Property(e => e.Amount)
                .IsRequired()
                .HasColumnType("decimal(18,2)")
                .HasComment("Bill amount.");

            entity.Property(e => e.DueDate)
                .IsRequired()
                .HasComment("Due date for the bill.");

            entity.Property(e => e.Frequency)
                .IsRequired()
                .HasConversion<string>()
                .HasMaxLength(20)
                .HasComment("Frequency of the bill (Daily, Weekly, BiWeekly, Monthly, Quarterly, HalfYearly, Yearly).");

            entity.Property(e => e.Notes)
                .HasMaxLength(500);

            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasConversion<string>()
                .HasMaxLength(20);

            entity.Property(e => e.ReminderDay)
                .IsRequired();

            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("now()")
                .HasComment("Timestamp when the bill was created.");

            entity.Property(e => e.ModifiedAt)
                .HasComment("Timestamp when the bill was last modified.");

            entity.Property(e => e.IsContinued)
                .IsRequired()
                .HasDefaultValue(true)
                .HasComment("Indicates if the bill is active (soft delete).");

            entity.HasOne(e => e.User)
                .WithMany()
                .HasForeignKey(e => e.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
        });
        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.PaymentId).HasName("payment_pkey");

            entity.ToTable("Payments", tb => tb.HasComment(
                "Represents a payment made for a bill by a user."
            ));

            entity.Property(e => e.PaymentId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasComment("Primary Key. Generated by the database.");

            entity.Property(e => e.BillId)
                .IsRequired()
                .HasComment("Foreign Key to Bill table.");

            entity.Property(e => e.UserId)
                .IsRequired()
                .HasComment("Foreign Key to User table.");

            entity.HasIndex(e => e.BillId);
            entity.HasIndex(e => e.UserId);

            entity.Property(e => e.AmountPaid)
                .IsRequired()
                .HasColumnType("decimal(18,2)")
                .HasComment("The amount paid in this payment.");

            entity.Property(e => e.PaymentDate)
                .IsRequired()
                .HasComment("The date and time when the payment was made.");

            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasConversion<string>()
                .HasMaxLength(20)
                .HasComment("Payment method (Cash, Card, UPI, etc).");

            entity.Property(e => e.Status)
                .IsRequired()
                .HasConversion<string>()
                .HasMaxLength(20)
                .HasComment("Status of the payment: COMPLETE, PENDING, or FAILED.");

            entity.Property(e => e.Notes)
                .HasMaxLength(500)
                .HasComment("Optional notes for the payment.");

            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("now()")
                .HasComment("When the payment record was created.");

            entity.Property(e => e.ModifiedAt)
                .HasComment("When the payment record was last modified.");

            entity.Property(e => e.IsContinued)
                .IsRequired()
                .HasDefaultValue(true)
                .HasComment("Indicates if the payment record is active (soft delete).");

            entity.HasOne(e => e.User)
                .WithMany()
                .HasForeignKey(e => e.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            entity.HasOne(e => e.Bill)
                .WithMany()
                .HasForeignKey(e => e.BillId)
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
        });
        modelBuilder.Entity<Budget>(entity =>
        {
            entity.HasKey(e => e.BudgetId).HasName("budget_pkey");

            entity.ToTable("Budgets", tb => tb.HasComment(
                "Represents a period-based budget set by a user for a specific category."
            ));

            entity.Property(e => e.BudgetId)
                .HasDefaultValueSql("gen_random_uuid()")
                .HasComment("Primary Key. Generated by the database.");

            entity.Property(e => e.UserId)
                .IsRequired()
                .HasComment("Foreign Key to User table.");

            entity.Property(e => e.CategoryId)
                .IsRequired()
                .HasComment("Foreign Key to Category table.");

            entity.HasIndex(e => e.UserId);
            entity.HasIndex(e => e.CategoryId);

            entity.Property(e => e.Amount)
                .IsRequired()
                .HasColumnType("decimal(18,2)")
                .HasComment("Budgeted amount for the period and category.");

            entity.Property(e => e.Period)
                .IsRequired()
                .HasConversion<string>()
                .HasMaxLength(20)
                .HasComment("Budget period (Weekly, Monthly, Quarterly, Yearly, Custom).");

            entity.Property(e => e.StartDate)
                .IsRequired()
                .HasComment("Start date of the budget period.");

            entity.Property(e => e.EndDate)
                .IsRequired()
                .HasComment("End date of the budget period.");

            entity.Property(e => e.Notes)
                .HasMaxLength(300)
                .HasComment("Optional notes about this budget.");

            entity.Property(e => e.CreatedAt)
                .IsRequired()
                .HasDefaultValueSql("now()")
                .HasComment("Timestamp when the budget was created.");

            entity.Property(e => e.ModifiedAt)
                .HasComment("Timestamp when the budget was last modified.");

            entity.Property(e => e.IsContinued)
                .IsRequired()
                .HasDefaultValue(true)
                .HasComment("Indicates if the budget is active (soft delete).");

            entity.HasOne(e => e.User)
                .WithMany()
                .HasForeignKey(e => e.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();

            entity.HasOne(e => e.Category)
                .WithMany()
                .HasForeignKey(e => e.CategoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .IsRequired();
        });



        // Seed constants
        string passwordHash = "$2a$11$DMIHU83vP3/khhmBkZ0rAePjQWVuThT0L95l1Q97vgJXlDBJIyLrm";//password is 12345Aa@
        DateTime baseTime = new(2024, 01, 01, 12, 0, 0, DateTimeKind.Utc);// DateTime.UtcNow gives error in migrations, so using a fixed base time for seeding

        // Seed users
        User[] users = new[]
        {
    new User { UserId = Guid.Parse("00000000-0000-0000-0000-000000000001"), UserName = "user3", Email = "wallet_holder_user3@yopmail.com", HashPassword = passwordHash, IsActive = true, CreatedAt = baseTime },
    new User { UserId = Guid.Parse("00000000-0000-0000-0000-000000000002"), UserName = "user2", Email = "wallet_holder_user2@yopmail.com", HashPassword = passwordHash, IsActive = true, CreatedAt = baseTime },
    new User { UserId = Guid.Parse("00000000-0000-0000-0000-000000000003"), UserName = "user1", Email = "wallet_holder_user1@yopmail.com", HashPassword = passwordHash, IsActive = true, CreatedAt = baseTime },
    new User { UserId = Guid.Parse("00000000-0000-0000-0000-000000000004"), UserName = "uttam", Email = "wallet_holder_uttam@yopmail.com", HashPassword = passwordHash, IsActive = true, CreatedAt = baseTime },
    new User { UserId = Guid.Parse("00000000-0000-0000-0000-000000000005"), UserName = "user4", Email = "wallet_holder_user4@yopmail.com", HashPassword = passwordHash, IsActive = true, CreatedAt = baseTime }
};
        modelBuilder.Entity<User>().HasData(users);

        // Seed related data
        int counter = 1;
        List<Category> categories = [];
        List<Transaction> transactions = [];
        List<Bill> bills = [];
        List<Payment> payments = [];
        List<Budget> budgets = [];
        List<PasswordRecoveryToken> recoveryTokens = [];
        List<RefreshToken> refreshTokens = [];

        foreach (User user in users)
        {
            for (int i = 1; i <= 5; i++)
            {
                Guid catId = Guid.Parse($"10000000-0000-0000-0000-{counter:000000000000}");
                categories.Add(new Category
                {
                    CategoryId = catId,
                    UserId = user.UserId,
                    CategoryName = $"Category{i}",
                    Description = $"Test category {i}",
                    Type = (i % 2 == 0) ? "Expense" : "Income",
                    IsActive = true,
                    CreatedAt = baseTime
                });

                Guid tranId = Guid.Parse($"20000000-0000-0000-0000-{counter:000000000000}");
                transactions.Add(new Transaction
                {
                    TransactionId = tranId,
                    UserId = user.UserId,
                    CategoryId = catId,
                    Amount = 100 + i,
                    TransactionType = (i % 2 == 0) ? "Expense" : "Income",
                    PaymentMethod = PaymentMethod.UPI,
                    Description = $"Transaction {i}",
                    TransactionDate = baseTime.AddDays(i),
                    CreatedAt = baseTime,
                    IsContinued = true
                });

                Guid billId = Guid.Parse($"30000000-0000-0000-0000-{counter:000000000000}");
                bills.Add(new Bill
                {
                    BillId = billId,
                    UserId = user.UserId,
                    Title = $"Bill {i}",
                    Amount = 500 + i,
                    DueDate = baseTime.AddDays(i),
                    Frequency = BillFrequency.Monthly,
                    ReminderDay = 2,
                    PaymentMethod = PaymentMethod.Card,
                    CreatedAt = baseTime,
                    IsContinued = true
                });

                payments.Add(new Payment
                {
                    PaymentId = Guid.Parse($"40000000-0000-0000-0000-{counter:000000000000}"),
                    BillId = billId,
                    UserId = user.UserId,
                    AmountPaid = 100 + i,
                    PaymentDate = baseTime.AddMinutes(i),
                    PaymentMethod = PaymentMethod.Card,
                    Status = PaymentStatus.Complete,
                    CreatedAt = baseTime,
                    IsContinued = true
                });

                budgets.Add(new Budget
                {
                    BudgetId = Guid.Parse($"50000000-0000-0000-0000-{counter:000000000000}"),
                    UserId = user.UserId,
                    CategoryId = catId,
                    Amount = 1000 + i * 10,
                    Period = BudgetPeriod.Monthly,
                    StartDate = baseTime,
                    EndDate = baseTime.AddMonths(1),
                    CreatedAt = baseTime,
                    IsContinued = true
                });

                recoveryTokens.Add(new PasswordRecoveryToken
                {
                    TokenId = Guid.Parse($"60000000-0000-0000-0000-{counter:000000000000}"),
                    UserId = user.UserId,
                    Token = $"recovery_token_{counter}",
                    ExpirationTime = baseTime.AddDays(1),
                    IsUsed = false,
                    CreatedAt = baseTime
                });

                refreshTokens.Add(new RefreshToken
                {
                    TokenId = Guid.Parse($"70000000-0000-0000-0000-{counter:000000000000}"),
                    UserId = user.UserId,
                    Token = $"refresh_token_{counter}",
                    ExpirationTime = baseTime.AddDays(7),
                    CreatedAt = baseTime,
                    CreatedByIp = "127.0.0.1",
                    IsActive = true,
                    IsRevoked = false
                });

                counter++;
            }
        }

        modelBuilder.Entity<Category>().HasData(categories);
        modelBuilder.Entity<Transaction>().HasData(transactions);
        modelBuilder.Entity<Bill>().HasData(bills);
        modelBuilder.Entity<Payment>().HasData(payments);
        modelBuilder.Entity<Budget>().HasData(budgets);
        modelBuilder.Entity<PasswordRecoveryToken>().HasData(recoveryTokens);
        modelBuilder.Entity<RefreshToken>().HasData(refreshTokens);


    }
}
